; PlatformIO Project Configuration File
;=======================================
; ESP32 PlatformIO Template
;=======================================
; by juepi (https://github.com/juepi/)
; 
; Includes useful functions like
;  - DeepSleep
;  - Read VCC
;  - MQTT
;  - OTA Updates (mandatory, requires MQTT!)
;  - NTP Client
;

; ---=== Project-wide Configuration ===---
; ========================================
[common_env_data]
; Hostname of board used for OTA flashing,
; WIFI-Hostname (DHCP Client name) and MQTT Client Name
ClientName = esp32-test

build_flags =
; Template Functions to enable/disable
; =====================================
; Define to enable signalling via onboard LED
    -D ONBOARD_LED
; Define to print debug output to Serial0
    -D SERIAL_OUT
; Define to enter DeepSleep after each loop execution or network failure (sleep time configurable in time-config.h)
;    -D E32_DEEP_SLEEP
; Define to read supply voltage from ADC (see hardware-config.h) and publish to MQTT topic
;    -D READVCC
; Firmware Action on network and/or MQTT broker outage
; 0 = reboot/DeepSleep ESP endlessly until network / broker recovers (default behavior until v1.1.0)
; 1 = continue to run firmware and use current settings (or local default values on firmware boot) after failing to connect to broker
; ATTN: this is only valid if E32_DEEP_SLEEP is disabled!
    -D NET_OUTAGE=0
; Define to wait for messages of all subscribed topics at firmware boot (default behavior until v1.1.0)
    -D WAIT_FOR_SUBSCRIPTIONS
; Define to enable configured ms delay in main loop if user_loop execution takes less than 100ms (additional idle time for WiFi tasks)
;    -D WIFI_DELAY=100
; Define to enable NTP client (configure in time-config.h)
; Uses Espressif NTP / RTC functionality
;    -D NTP_CLT
; Define to enable "sleep until" support (automatically enables NTP!) to allow DeepSleep until a configured (MQTT topic) epoch time
;    -D SLEEP_UNTIL
; If you need more time accuracy during DeepSleep, enable this option (at the cost of additional 5-20µA power drawn during DeepSleep)
; the default 150kHz oscillator may be off for 2min/day per °C temp.change, 8Mhz clock reduces that to a quarter
;    -D SLEEP_RTC_CLK_8M
; Boot with WiFi disabled (automatically unsets WAIT_FOR_SUBSCRIPTIONS and sets NET_OUTAGE=1)
;    -D BOOT_WIFI_OFF

; Network / Service Configuration
; ================================
; Set system Environment Variables according to your setup
; Take care when using special characters, might need escaping
; see https://docs.platformio.org/en/latest/projectconf/section_env_build.html#build-flags
    -D WIFI_SSID=\"${sysenv.WIFI_SSID}\"
    -D WIFI_PSK=\"${sysenv.WIFI_PSK}\"
    -D CLTNAME="${common_env_data.ClientName}"
    -D MQTT_BROKER=\"${sysenv.MQTT_BROKER}\"
    -D OTA_PWD=\"${sysenv.OTA_PWD}\"

; Compiler Warnings
    -Wall

; Required Libraries (add user-required libraries here)
; ======================================================
lib_deps =
    knolleary/PubSubClient @ ^2.8

; Upload Settings
; ================
[env]
; Uncomment the following 5 lines to flash OTA (default is wired upload)
; upload_protocol = espota
; upload_port = ${common_env_data.ClientName}
; upload_flags =
;  --port=3232
;  --auth=${sysenv.OTA_PWD}


; ---=== Board-specific Configuration ===---
; ==========================================
; Board Selection
[platformio]
default_envs = Wemos_S2MINI

[env:Wemos_LOLIN32]
platform = espressif32
board = lolin32
framework = arduino
monitor_speed = 115200
build_flags =
    -D WEMOS_LOLIN32
    ${common_env_data.build_flags}
lib_deps =
    ${common_env_data.lib_deps}

[env:Wemos_S2MINI]
; NOTE: The following description is outdated if you use the latest Espressif framework!
; ATTENTION: Wired Programming for this board is a bit complicated, follow these instructions:
; - Connect the board to the PC, listen to the "new device connected" sound (COM port added to system)
; - Start the PlatformIO:Upload process
; - When you see the output "Waiting for the new upload port..." on the terminal, QUICKLY
;  - Press and hold the "0" button on the board and then immediately press and hold the "RST" button until you hear the "device disconnected" sound from your OS, then QUICKLY
;  - Release both buttons
; - if you got this timed correctly, the upload will start - if not, retry!
; - Upload will give you a WARNING the you have to reset the board manually -> do so using the RST button and your new sketch should be booted

platform = espressif32
board = lolin_s2_mini
framework = arduino
monitor_speed = 115200
; set frequency to 80MHz (80/160/240 allowed; defaults to 240Mhz; clock down for power saving)
;board_build.f_cpu = 80000000L
build_flags =
    -D WEMOS_S2MINI
; Define if you're using a ESP-Mini-Base (https://github.com/juepi/ESP-Mini-Base) to get some additional #defined pins (EMB_ prefix)
;    -D ESP_Mini_Base
    ${common_env_data.build_flags}
lib_deps =
    ${common_env_data.lib_deps}

[env:ESP32C6]
; Note: complex configuration due to bickering between PIO crew and Espressif..
; See: https://github.com/platformio/platform-espressif32/issues/1225
; This board uses Espressif IDF 5.x and generates firmware binaries with ~250kB increased size (probably due to IPv6, WPA3.. - couldn't find a solution to disable these features)
framework = arduino
platform = espressif32 @ 6.6.0
platform_packages = 
	platformio/framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git
	platformio/framework-arduinoespressif32-libs @ https://github.com/espressif/esp32-arduino-libs.git#idf-release/v5.1
; Chip type ESP32-C6FH4 (4MB flash on-chip)
; board config file in projects "boards" directory!
board = ESP32-C6-DevKitC-1
; Use partition table with maximized app space (for 4MB flash); reduces SPIFFS partition to 132kB
board_build.partitions = min_spiffs.csv
; Partition table for ESPs with 8MB flash
;board_build.partitions = default_8MB.csv
monitor_speed = 115200
; set frequency to 80MHz (80/160 allowed; defaults to 160Mhz; clock down for power saving)
;board_build.f_cpu = 80000000L
build_flags =
    -D ESP32C6
    ${common_env_data.build_flags}
lib_deps =
    ${common_env_data.lib_deps}
